#include <iostream>
#include<cstdlib>
using namespace std;

int RandomNumber(int From, int To)
{
	//Function to generate a random number
	int randNum = rand() % (To - From + 1) + From;
	return randNum;
}
int ReadPositiveNumber(string Message)
{
	system("color 2");
	int Number = 0;
	do
	{
		cout << Message << endl;
		cin >> Number;
	} while (Number <= 0);
	return Number;
}

enum enCharType { SamallLetter = 1, CapitalLetter = 2, SpecialCharacter = 3, Digit = 4 };

char GetRandomCharacter(enCharType CharType)  {
	switch (CharType)
	{
	case enCharType::SamallLetter:
		{
		return char(RandomNumber(97, 122));
		}
	case enCharType::CapitalLetter :
	{
		return char(RandomNumber(65, 90));
	}
	case enCharType::SpecialCharacter:
	{
		return char(RandomNumber(33, 47));
	}
	case enCharType::Digit: 
	{
		return char(RandomNumber(48, 57));
	}
	default:
	{
		break;
	}

	}
}

//output = QGSJ
string GenerateWord(enCharType CharType , short Length)
{
	string word;

	for (int i = 1 ; i <= Length; i++)
	{
		word = word + GetRandomCharacter(CharType);
	}
	return word;

}

//output = SGQW-GDRQ-NVJK-AKRG

string GenerateKey()
{
	string key = "";
	key = GenerateWord(enCharType::CapitalLetter, 4) + "-";
	key = key + GenerateWord(enCharType::CapitalLetter, 4) + "-";
	key = key + GenerateWord(enCharType::CapitalLetter, 4) + "-";
	key = key + GenerateWord(enCharType::CapitalLetter, 4);

	return key;

}

// Key [1]: TQST-MAKQ-ZJSD-QSKW
// Key [2]: XVIF-RBDD-TASQ-RKRZ
// Key [3]: TOOY-HXMH-HSWZ-ELQO

void GenerateKeys(short Num)
{

	
	for (int i = 1; i <=Num ; i++)
	{
		cout << "  [" << i << "] : ";
		cout << GenerateKey () << endl;
	}
	
}

int main() {

	srand((unsigned)time(NULL));


	GenerateKeys(ReadPositiveNumber("Please Enter Num >? "));
	return 0;
}